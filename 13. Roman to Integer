/**
Runtime Complexity: O(n)
Memory Complexity: O(1)
A 'switch' statement maps Roman numerals to their integer values respectively.
Iterates through the string from left to right, adding the value of the current numeral to the total result.
If the current numeral represents a larger number than the previous one(indicating a subtractive pairing,
such as IV or IX), the algorithm adjusts by subtracting twice the value of the previous numeral(since it was
added once before encountering the current numeral).


class Solution {
    public int romanToInt(String s) {
        int sum = 0;
        int value = 0;
        int preValue = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch(c) {
                case 'I' -> value = 1;
                case 'V' -> value = 5;
                case 'X' -> value = 10;
                case 'L' -> value = 50;
                case 'C' -> value = 100;
                case 'D' -> value = 500;
                case 'M' -> value = 1000;
            }
            if (value <= preValue) {
                sum += value;
            } else {
                sum = sum + value - 2*preValue;
            }
            preValue = value;
        }
        return sum;
    }
}
