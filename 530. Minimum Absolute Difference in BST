// recursion solution
class Solution {
    int result = Integer.MAX_VALUE;
    TreeNode pre = null;
    public int getMinimumDifference(TreeNode root) {
        traversal(root);
        return result;
    }
    public void traversal(TreeNode cur) {
        if (cur == null) return;
        traversal(cur.left);
        if (pre != null) result = Math.min(result, cur.val - pre.val);
        pre = cur;
        traversal(cur.right);

    }
}

//iteration
class Solution {    
    public int getMinimumDifference(TreeNode root) {
        int result = Integer.MAX_VALUE;
        TreeNode pre = null;
        Deque<TreeNode> stack = new LinkedList<>();
        TreeNode cur = root;    
        while(cur != null || !stack.isEmpty()) {
            if (cur != null) {
                stack.push(cur);
                cur = cur.left;
            } else {
                cur = stack.pop();
                if (pre != null)
                    result = Math.min(result, cur.val - pre.val);
                
                pre = cur;
                cur = cur.right;
            }
        }
        return result;
    }
    
}
