/**
Runtime Complexity: O(n)
Memory Complexity: O(n)
Data Structure: Stack
Use a stack to track opening parentheses, brackets, and braces by pushing their corresponding closing symbols onto the stack whenever an opening
symbol is encountered. As the string is iterated, for each closing symbol found, it checks against the stack's top element for a match, ensuring
proper nesting and pairing. This method ensures that the string's validity is determined based on the balance and correct ordering of all symbols
returning true only if the stack is empty at the end, indicating all symbols have been correctly matched.

**/



class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        if(s.length() % 2 != 0){
            return false;
        }
        for (int i = 0; i < s.length(); i++) {
            if(s.charAt(i) == '(') {
                stack.push(')');
            } else if(s.charAt(i) == '{') {
                stack.push('}');
            } else if(s.charAt(i) == '[') {
                stack.push(']');
            } else {
                if (stack.empty() || s.charAt(i) != stack.pop()) 
                return false;  
            }         
            
        }
        return stack.empty();
    }
}
