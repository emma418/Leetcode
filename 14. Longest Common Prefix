/**
Runtime Complexity: O(nlog n)
Memory Complexity: O(1)
First sort the string array, this ensures that strings that are similar will be adjacent, and particularly, the first
and the last strings in the sorted array will represent the range of all string variations in terms of their prefixes.
only compare the first and the last strings in the sorted array, since any common prefix present across all strings 
must also be a common prefix between these two extremes.

**/

class Solution {
    public String longestCommonPrefix(String[] strs) {
        Arrays.sort(strs);
        String first = strs[0];
        String last = strs[strs.length - 1];
        int index = 0;
        for (int i = 0; i < first.length(); i++) {
            if (i >= last.length() || last.charAt(i) != first.charAt(i)){
                return first.substring(0,index);
            } else {
                index++;
            }
        }
        return first.substring(0,index);
    }
}
